# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on: push

jobs:
  change-detection:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      operator-check-components: ${{ steps.filter_python_simple_check.outputs.operator-check }}
      json_data: ${{ steps.read-config.outputs.json_data }}
    steps:
      - uses: actions/checkout@v3
      - name: Filter changes for operator
        id: filter_python_simple_check
        uses: actions/github-script@v6
        with:
          script: |
            const changes = ['training-operator', 'inference-operator'];
            const operatorCheck = [
              'inference-operator', 'training-operator'
            ];
            const operatorChanges = changes.filter((change) => operatorCheck.includes(change));
            const operatorNames = operatorChanges.map((element) => element.split('-')[0]);
            core.setOutput('operator-check', operatorNames);
      - name: Read config file
        id: read-config
        run: | 
          python3 -m pip install toml
          JSON_DATA=$(python3 -c 'import toml, json, os
          with open("src/config.toml") as file:
            data = toml.load(file)
            json_data = json.dumps(data)
            print(json_data)')
          echo "JSON TEST--------------"
          echo "json_data=$JSON_DATA" >> "$GITHUB_OUTPUT"
      - name: Test-json
        id: test-json
        run: | 
          echo ${{ steps.read-config.outputs.json_data }}

  checks-matrix:
    name: ${{ matrix.component }} operator checks
    #runs-on: ubuntu-latest
    uses: ./.github/workflows/checks.yml
    if: (contains(needs.change-detection.outputs.operator-check-components, 'inference') || contains(needs.change-detection.outputs.operator-check-components, 'training'))
    with:
      ie_type: 'test' #read it from config file
      image_path: 'test' #read it from config file
      docker_image: ${{ fromJSON(needs.change-detection.outputs.json_data)[docker_image] }} 
    strategy:
      fail-fast: false
      matrix:
        component: [docker_image]
    # steps:
    #   - name: print-json-from-previos-job
    #     id: print-json-from-previos-job
    #     run: |
    #       echo ${{ fromJSON(needs.change-detection.outputs.json_data.params.docker_image }} 
    needs: change-detection